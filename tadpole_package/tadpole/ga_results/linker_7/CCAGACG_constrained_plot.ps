%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Fri Aug 22 19:16:04 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGGGUGCGGAUGAUAACUACUGACGAAAGAGUCAUCGACUCAGUUAGUGGUUGGAUGUAGUCACCUUACUCCAGACGAGUUGGUGAUACCAGCAUCGUCUUGAUGCCCUUGGCAGCACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[88.82698059 111.17863464]
[87.28305054 106.50079346]
[87.40251923 102.02614594]
[88.89575195 98.28065491]
[74.39889526 94.42824554]
[59.90203476 90.57583618]
[45.40517426 86.72342682]
[30.90831566 82.87101746]
[16.41145706 79.01860809]
[1.86805844 75.34578705]
[-7.09726238 87.58910370]
[-20.03216553 95.44602966]
[-34.94940948 97.74591827]
[-49.57109833 94.16906738]
[-61.67651367 85.29079437]
[-69.43939972 72.48911285]
[-71.70343781 57.73094940]
[-86.29114532 54.23828888]
[-100.87886047 50.74562836]
[-115.46656799 47.25297165]
[-130.05427551 43.76031113]
[-144.64199829 40.26765060]
[-159.22970581 36.77499008]
[-173.81741333 33.28232956]
[-188.40512085 29.78967094]
[-202.99284363 26.29701233]
[-217.58055115 22.80435181]
[-225.03974915 28.88030052]
[-234.33557129 30.74995041]
[-243.29774475 28.10859680]
[-249.89491272 21.68963242]
[-252.69483948 13.06684017]
[-266.98345947 8.50222015]
[-281.27206421 3.93760085]
[-295.56066895 -0.62701899]
[-309.84927368 -5.19163895]
[-326.77716064 -4.25202894]
[-332.36614990 -20.25826073]
[-318.53262329 -30.05980301]
[-305.28463745 -19.48024368]
[-290.99603271 -14.91562462]
[-276.70742798 -10.35100460]
[-262.41882324 -5.78638506]
[-248.13021851 -1.22176516]
[-228.53570557 -7.51255322]
[-214.08789062 8.21664047]
[-199.50018311 11.70930004]
[-184.91247559 15.20196056]
[-170.32475281 18.69462013]
[-155.73704529 22.18727875]
[-141.14933777 25.67993927]
[-126.56162262 29.17259979]
[-111.97390747 32.66526031]
[-97.38619995 36.15791702]
[-82.79848480 39.65057755]
[-68.21077728 43.14323807]
[-59.50843811 31.01069641]
[-46.78957367 23.11285400]
[-31.97591591 20.67967224]
[-17.31978416 24.11266327]
[-5.06164646 32.91900635]
[2.91238189 45.78205109]
[5.36071825 60.75807571]
[12.67681599 59.23954391]
[20.26386642 64.52174377]
[34.76072693 68.37415314]
[49.25758743 72.22656250]
[63.75444412 76.07897186]
[78.25130463 79.93138123]
[92.74816132 83.78379822]
[106.97921753 79.04280090]
[116.26927185 67.26591492]
[125.55932617 55.48903656]
[134.84938049 43.71215439]
[134.40417480 27.67527962]
[146.75715637 17.43890762]
[162.43217468 20.85550690]
[169.40470886 35.30415726]
[162.32600403 49.70108414]
[146.62625122 53.00220490]
[137.33621216 64.77909088]
[128.04615784 76.55596924]
[118.75610352 88.33284760]
[122.42891693 102.87625122]
[136.19671631 108.83006287]
[149.96450806 114.78387451]
[163.73229980 120.73768616]
[177.50009155 126.69149780]
[190.82412720 118.95999146]
[205.96885681 120.53813934]
[217.14810181 130.61228943]
[220.21493530 145.16331482]
[233.98272705 151.11712646]
[247.75051880 157.07093811]
[261.72970581 162.50991821]
[275.90103149 167.42655945]
[290.07235718 172.34320068]
[304.24368286 177.25984192]
[318.41500854 182.17649841]
[333.42001343 176.49937439]
[347.13989258 184.81468201]
[349.04995728 200.74362183]
[337.68493652 212.06687927]
[321.76312256 210.09822083]
[313.49838257 196.34782410]
[299.32705688 191.43118286]
[285.15573120 186.51454163]
[270.98437500 181.59788513]
[256.81304932 176.68124390]
[253.41848755 177.96200562]
[249.21897888 177.59420776]
[245.02865601 175.21113586]
[241.79670715 170.83872986]
[228.02891541 164.88491821]
[214.26112366 158.93110657]
[201.55830383 166.66264343]
[186.56123352 165.41697693]
[175.03860474 155.46295166]
[171.54627991 140.45928955]
[157.77848816 134.50547791]
[144.01069641 128.55166626]
[130.24290466 122.59785461]
[116.47510529 116.64404297]
[109.86198425 119.54962158]
[103.12753296 120.13196564]
[97.01593781 118.61294556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 63]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[71 83]
[72 82]
[73 81]
[74 80]
[84 123]
[85 122]
[86 121]
[87 120]
[88 119]
[92 115]
[93 114]
[94 113]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% Start Annotations
1 73 10 GREEN omark 74 80 10 RED omark 81 126 10 BLUE omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
