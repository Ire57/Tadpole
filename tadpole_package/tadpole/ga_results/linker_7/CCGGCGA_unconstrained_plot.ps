%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Fri Aug 22 19:16:11 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGUGUGCGGAUGAUAACUACUGACGAAAGAGUCAUCGACUCAGUUAGUGGUUGGAUGUAGUCACAUUAGUCCGGCGAAGUUGGUGAUACCAGCAUCGUCUUGAUGCCCUUGGCAGCACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[66.84368896 230.45495605]
[56.76684189 218.77331543]
[54.62786102 203.49494934]
[61.10928345 189.49514771]
[74.14291382 181.24116516]
[70.96260834 174.47973633]
[74.33302307 165.87130737]
[74.70404053 150.87588501]
[75.07505798 135.88047791]
[75.44607544 120.88507080]
[68.32404327 107.68367767]
[55.58805084 99.75937653]
[42.85205841 91.83507538]
[30.11606789 83.91078186]
[12.59827137 90.80314636]
[-5.86629200 82.09568024]
[-12.70004940 61.17815399]
[-27.28776169 57.68549347]
[-41.87547302 54.19283676]
[-56.46318436 50.70017624]
[-71.05089569 47.20751572]
[-85.63861084 43.71485519]
[-100.22631836 40.22219467]
[-114.81403351 36.72953796]
[-129.40174866 33.23687744]
[-143.98945618 29.74421692]
[-158.57716370 26.25155830]
[-166.03636169 32.32750702]
[-175.33218384 34.19715500]
[-184.29435730 31.55580330]
[-190.89152527 25.13683891]
[-193.69145203 16.51404572]
[-207.98005676 11.94942570]
[-222.26866150 7.38480616]
[-236.55728149 2.82018638]
[-250.84588623 -1.74443352]
[-267.77377319 -0.80482382]
[-273.36276245 -16.81105614]
[-259.52926636 -26.61259842]
[-246.28126526 -16.03303909]
[-231.99266052 -11.46841908]
[-217.70405579 -6.90379953]
[-203.41543579 -2.33917975]
[-189.12683105 2.22544003]
[-169.53231812 -4.06534815]
[-155.08450317 11.66384602]
[-140.49679565 15.15650558]
[-125.90908051 18.64916611]
[-111.32137299 22.14182472]
[-96.73365784 25.63448524]
[-82.14595032 29.12714386]
[-67.55823517 32.61980438]
[-52.97052383 36.11246490]
[-38.38281250 39.60512543]
[-23.79510117 43.09778214]
[-9.20738983 46.59044266]
[2.56949210 37.30039215]
[2.56949210 22.30039215]
[2.56949210 7.30039215]
[2.56949210 -7.69960785]
[2.56949210 -22.69960785]
[-6.09421062 -36.62340927]
[1.86991835 -50.95884705]
[18.26906586 -50.95884705]
[26.23319435 -36.62340927]
[17.56949234 -22.69960785]
[17.56949234 -7.69960785]
[17.56949234 7.30039215]
[17.56949234 22.30039215]
[17.56949234 37.30039215]
[36.47160721 50.63663483]
[38.04036713 71.17478943]
[50.77635956 79.09908295]
[63.51235199 87.02338409]
[76.24834442 94.94768524]
[118.68274689 62.57044601]
[132.97134399 58.00582886]
[147.25994873 53.44120789]
[161.54856873 48.87658691]
[175.83717346 44.31196976]
[186.62832642 32.74211884]
[201.10650635 36.23945618]
[215.39511108 31.67483521]
[229.68373108 27.11021614]
[243.97233582 22.54559708]
[258.26092529 17.98097610]
[272.54953003 13.41635704]
[285.79754639 2.83679843]
[299.63104248 12.63834000]
[294.04205322 28.64457130]
[277.11416626 27.70496178]
[262.82556152 32.26958084]
[248.53694153 36.83420181]
[234.24833679 41.39882278]
[219.95973206 45.96343994]
[205.67112732 50.52806091]
[195.90199280 61.77141953]
[180.40179443 58.60057449]
[166.11317444 63.16519547]
[151.82456970 67.72981262]
[137.53596497 72.29443359]
[123.24736786 76.85905457]
[121.32115936 84.10748291]
[135.81796265 87.96013641]
[131.96505737 102.45686340]
[117.46875000 98.60433960]
[115.54254150 105.85277557]
[125.68019867 116.90844727]
[135.81785583 127.96412659]
[145.95550537 139.01980591]
[161.11669922 146.60758972]
[158.02249146 163.27677917]
[141.14817810 164.91799927]
[134.89982605 149.15745544]
[124.76216888 138.10177612]
[114.62451935 127.04610443]
[104.48686981 115.99042511]
[90.44148254 121.25608063]
[90.07046509 136.25149536]
[89.69944763 151.24690247]
[89.32843018 166.24230957]
[89.14291382 181.24116516]
[102.17653656 189.49514771]
[108.65795898 203.49494934]
[106.51898193 218.77331543]
[96.44213867 230.45495605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 122]
[7 121]
[8 120]
[9 119]
[10 118]
[11 75]
[12 74]
[13 73]
[14 72]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[76 102]
[77 101]
[78 100]
[79 99]
[80 98]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% Start Annotations
1 73 10 GREEN omark 74 80 10 RED omark 81 126 10 BLUE omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
