%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Fri Aug 22 19:21:55 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGGGUGCGGAUGAUAACUACUGACGAAAGAGUCAUCGACUCAGUUAGUGGUUGGAUGUAGUCACCUUAGUCGAAGACAGUUGGUGAUACCAGCAUCGUCUUGAUGCCCUUGGCAGCACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[88.95954895 256.96499634]
[75.86074829 248.94522095]
[68.54084778 235.44282532]
[68.96886444 220.08990479]
[77.02967072 207.01629639]
[90.55493927 199.73876953]
[90.92595673 184.74334717]
[91.29697418 169.74794006]
[91.66799164 154.75253296]
[92.03900909 139.75712585]
[82.13924408 136.19125366]
[73.53443909 130.22026062]
[66.79261780 122.26899719]
[62.35087967 112.89189148]
[60.48709869 102.73440552]
[61.30265427 92.48857880]
[64.71723938 82.84590912]
[50.12952805 79.35324860]
[35.54181671 75.86058807]
[20.95410347 72.36792755]
[6.36639261 68.87526703]
[-8.22131920 65.38260651]
[-22.80903053 61.88994598]
[-37.39674377 58.39728546]
[-51.98445511 54.90462875]
[-66.57216644 51.41196823]
[-81.15987396 47.91930771]
[-88.61907196 53.99525452]
[-97.91488647 55.86490631]
[-106.87707520 53.22355270]
[-113.47423553 46.80458832]
[-116.27416992 38.18179703]
[-130.56277466 33.61717606]
[-144.85137939 29.05255699]
[-159.13998413 24.48793602]
[-173.42858887 19.92331696]
[-190.35647583 20.86292648]
[-195.94548035 4.85669470]
[-182.11196899 -4.94484711]
[-168.86396790 5.63471174]
[-154.57536316 10.19933128]
[-140.28675842 14.76395130]
[-125.99815369 19.32857132]
[-111.70954895 23.89319038]
[-92.11503601 17.60240173]
[-77.66721344 33.33159637]
[-63.07950592 36.82425690]
[-48.49179459 40.31691742]
[-33.90408325 43.80957413]
[-19.31637001 47.30223465]
[-4.72865915 50.79489517]
[9.85905266 54.28755569]
[24.44676399 57.78021622]
[39.03447723 61.27287292]
[53.62218857 64.76553345]
[68.20989990 68.25819397]
[80.43180084 59.56192017]
[81.91359711 44.63529205]
[83.39539337 29.70866013]
[73.65393066 17.55375862]
[75.36931610 2.43714142]
[87.01718903 -6.77494764]
[88.49898529 -21.70157814]
[81.25314331 -36.41313171]
[90.59446716 -49.89169693]
[106.91339874 -48.27168655]
[113.42242432 -33.21962357]
[103.42562103 -20.21978188]
[101.94382477 -5.29315138]
[111.55319977 6.02918768]
[110.26308441 21.18802261]
[98.32202148 31.19045639]
[96.84022522 46.11708832]
[95.35842896 61.04371643]
[117.21847534 67.44045258]
[130.55210876 84.12075043]
[145.04896545 80.26834106]
[159.54582214 76.41593170]
[174.04267883 72.56352234]
[188.53955078 68.71111298]
[202.03872681 53.83620834]
[220.48724365 59.41250229]
[234.77584839 54.84788132]
[249.06445312 50.28326035]
[263.35305786 45.71864319]
[277.64166260 41.15402222]
[291.93026733 36.58940125]
[305.17825317 26.00984383]
[319.01177979 35.81138611]
[313.42279053 51.81761551]
[296.49487305 50.87800598]
[282.20626831 55.44262695]
[267.91766357 60.00724792]
[253.62907410 64.57186890]
[239.34046936 69.13648987]
[225.05186462 73.70110321]
[221.13716125 83.28176117]
[212.37973022 89.20146179]
[201.58847046 89.26574707]
[192.39195251 83.20796967]
[177.89509583 87.06037903]
[163.39823914 90.91278839]
[148.90138245 94.76519775]
[134.40451050 98.61761475]
[135.80134583 106.95314789]
[135.10140991 115.83609772]
[132.13548279 124.72482300]
[142.27313232 135.78050232]
[152.41078186 146.83618164]
[162.54843140 157.89186096]
[177.70964050 165.47962952]
[174.61543274 182.14883423]
[157.74110413 183.79003906]
[151.49275208 168.02951050]
[141.35510254 156.97383118]
[131.21745300 145.91815186]
[121.07980347 134.86247253]
[107.03441620 140.12814331]
[106.66339874 155.12355042]
[106.29238129 170.11895752]
[105.92136383 185.11436462]
[105.55035400 200.10978699]
[118.69917297 208.04728699]
[126.10357666 221.50352478]
[125.77181244 236.85884094]
[117.79312134 249.98271179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[57 74]
[58 73]
[59 72]
[62 69]
[63 68]
[76 104]
[77 103]
[78 102]
[79 101]
[80 100]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% Start Annotations
1 73 10 GREEN omark 74 80 10 RED omark 81 126 10 BLUE omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
