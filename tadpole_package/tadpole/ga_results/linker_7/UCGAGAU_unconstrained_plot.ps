%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Fri Aug 22 19:21:49 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGUGUGCGGAUGAUAACUACUGACGAAAGAGUCAUCGACUCAGUUAGUGGUUGGAUGUAGUCACAUUAAUUCGAGAUAGUUGGUGAUACCAGCAUCGUCUUGAUGCCCUUGGCAGCACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[96.16199493 254.54875183]
[86.08514404 242.86711121]
[83.94616699 227.58874512]
[90.42758942 213.58894348]
[103.46121216 205.33496094]
[100.28091431 198.57353210]
[103.65132904 189.96508789]
[104.02234650 174.96968079]
[104.39335632 159.97427368]
[104.76437378 144.97886658]
[91.65898895 143.55793762]
[79.77571106 138.47682190]
[70.08971405 130.31561279]
[63.34759521 119.89950562]
[60.01065445 108.21712494]
[60.22545624 96.32752228]
[63.82337189 85.26438141]
[49.23566055 81.77172089]
[34.64794922 78.27906036]
[20.06023788 74.78639984]
[5.47252560 71.29373932]
[-9.11518574 67.80108643]
[-23.70289803 64.30842590]
[-38.29060745 60.81576157]
[-52.87832260 57.32310486]
[-67.46603394 53.83044434]
[-82.05374146 50.33778381]
[-89.51293945 56.41373062]
[-98.80875397 58.28338242]
[-107.77094269 55.64202881]
[-114.36809540 49.22306442]
[-117.16803741 40.60027313]
[-131.45663452 36.03565216]
[-145.74525452 31.47103310]
[-160.03385925 26.90641212]
[-174.32246399 22.34179306]
[-191.25035095 23.28140259]
[-196.83934021 7.27517080]
[-183.00582886 -2.52637100]
[-169.75784302 8.05318737]
[-155.46923828 12.61780739]
[-141.18063354 17.18242645]
[-126.89202118 21.74704742]
[-112.60341644 26.31166649]
[-93.00890350 20.02087784]
[-78.56108093 35.75007248]
[-63.97337341 39.24273300]
[-49.38566208 42.73539352]
[-34.79795074 46.22805023]
[-20.21023750 49.72071075]
[-5.62252617 53.21337128]
[8.96518517 56.70603180]
[23.55289650 60.19869232]
[38.14060974 63.69134903]
[52.72832108 67.18401337]
[67.31603241 70.67666626]
[79.09291077 61.38661957]
[79.09291077 46.38661957]
[79.09291077 31.38661766]
[79.09291077 16.38661766]
[79.09291077 1.38661861]
[70.42920685 -12.53718472]
[78.39334106 -26.87261963]
[94.79248810 -26.87261963]
[102.75661469 -12.53718472]
[94.09291077 1.38661861]
[94.09291077 16.38661766]
[94.09291077 31.38661766]
[94.09291077 46.38661957]
[94.09291077 61.38661957]
[111.40322113 61.02952194]
[127.82667542 68.34549713]
[140.01181030 82.45742798]
[145.21824646 101.05257416]
[159.71510315 97.20015717]
[174.21195984 93.34774780]
[188.70881653 89.49533844]
[203.20567322 85.64292908]
[217.70254517 81.79051971]
[232.19940186 77.93811035]
[245.69857788 63.06320953]
[264.14709473 68.63950348]
[278.43569946 64.07488251]
[292.72430420 59.51026154]
[307.01290894 54.94564056]
[321.30151367 50.38101959]
[335.59011841 45.81640244]
[348.83810425 35.23684311]
[362.67163086 45.03838348]
[357.08264160 61.04461670]
[340.15475464 60.10500717]
[325.86614990 64.66962433]
[311.57754517 69.23424530]
[297.28890991 73.79886627]
[283.00030518 78.36348724]
[268.71170044 82.92810822]
[264.79702759 92.50875854]
[256.03958130 98.42845917]
[245.24832153 98.49274445]
[236.05180359 92.43496704]
[221.55494690 96.28738403]
[207.05809021 100.13979340]
[192.56123352 103.99220276]
[178.06437683 107.84461212]
[163.56750488 111.69702148]
[149.07064819 115.54943085]
[144.86085510 129.94656372]
[154.99850464 141.00224304]
[165.13615417 152.05792236]
[175.27380371 163.11360168]
[190.43501282 170.70137024]
[187.34080505 187.37057495]
[170.46647644 189.01179504]
[164.21812439 173.25125122]
[154.08047485 162.19557190]
[143.94282532 151.13989258]
[133.80517578 140.08421326]
[119.75978851 145.34988403]
[119.38877106 160.34529114]
[119.01775360 175.34069824]
[118.64673615 190.33610535]
[118.46121216 205.33496094]
[131.49484253 213.58894348]
[137.97627258 227.58874512]
[135.83728027 242.86711121]
[125.76043701 254.54875183]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 122]
[7 121]
[8 120]
[9 119]
[10 118]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[74 106]
[75 105]
[76 104]
[77 103]
[78 102]
[79 101]
[80 100]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% Start Annotations
1 73 10 GREEN omark 74 80 10 RED omark 81 126 10 BLUE omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
