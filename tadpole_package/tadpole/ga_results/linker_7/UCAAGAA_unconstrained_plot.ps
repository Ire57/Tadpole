%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Fri Aug 22 19:21:58 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAGUGCUCGGAUGAUAACUACUGACGAAAGAGUCAUCGACUCAGUUAGUGGUUGGAUGUAGUAGCAUUAAUUCAAGAAAGUUGGUGAUACCAGCAUCGUCUUGAUGCCCUUGGCAGCACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[83.42015839 253.01699829]
[75.44147491 239.89312744]
[75.10971069 224.53781128]
[82.51411438 211.08157349]
[95.66293335 203.14405823]
[95.29191589 188.14865112]
[94.92089844 173.15324402]
[94.54988098 158.15783691]
[94.17886353 143.16241455]
[84.39511871 140.51747131]
[75.51697540 135.69444275]
[68.01985168 128.96810913]
[62.30134964 120.71472168]
[58.66022491 111.39091492]
[57.28076553 101.50853729]
[58.22354507 91.60647583]
[61.42288971 82.22132111]
[46.83517838 78.72866058]
[32.24746704 75.23600006]
[17.65975761 71.74334717]
[3.07204533 68.25068665]
[-11.51566601 64.75802612]
[-26.10337830 61.26536560]
[-40.69108963 57.77270508]
[-55.27880096 54.28004456]
[-69.86651611 50.78738403]
[-84.45422363 47.29472351]
[-91.91341400 53.37067413]
[-101.20923615 55.24032593]
[-110.17141724 52.59897232]
[-116.76857758 46.18000793]
[-119.56851959 37.55721283]
[-133.85711670 32.99259186]
[-148.14572144 28.42797470]
[-162.43432617 23.86335373]
[-176.72293091 19.29873466]
[-193.65083313 20.23834419]
[-199.23982239 4.23211193]
[-185.40631104 -5.56942987]
[-172.15832520 5.01012897]
[-157.86972046 9.57474899]
[-143.58110046 14.13936806]
[-129.29249573 18.70398903]
[-115.00389862 23.26860809]
[-95.40938568 16.97781944]
[-80.96156311 32.70701218]
[-66.37385559 36.19967270]
[-51.78614044 39.69233322]
[-37.19842911 43.18499374]
[-22.61071777 46.67765427]
[-8.02300644 50.17031097]
[6.56470490 53.66297150]
[21.15241623 57.15563202]
[35.74012756 60.64829254]
[50.32783890 64.14095306]
[64.91555023 67.63361359]
[76.69243622 58.34355927]
[76.69243622 43.34355927]
[76.69243622 28.34355927]
[76.69243622 13.34356022]
[76.69243622 -1.65644014]
[68.02873230 -15.58024311]
[75.99285889 -29.91567802]
[92.39200592 -29.91567802]
[100.35613251 -15.58024311]
[91.69243622 -1.65644014]
[91.69243622 13.34356022]
[91.69243622 28.34355927]
[91.69243622 43.34355927]
[91.69243622 58.34355927]
[105.36724091 59.02982330]
[117.73596191 63.96444702]
[127.55697632 72.39245605]
[133.92958069 83.22322083]
[148.42643738 79.37081146]
[162.92329407 75.51840210]
[177.42015076 71.66599274]
[191.91700745 67.81358337]
[206.41387939 63.96117020]
[215.18626404 47.26513672]
[233.04183960 42.25964737]
[248.67196655 51.63731384]
[262.96057129 47.07269669]
[277.24917603 42.50807571]
[291.53778076 37.94345474]
[305.82638550 33.37883759]
[320.11499023 28.81421661]
[333.36297607 18.23465729]
[347.19650269 28.03619957]
[341.60751343 44.04243088]
[324.67962646 43.10282135]
[310.39102173 47.66744232]
[296.10238647 52.23206329]
[281.81378174 56.79668045]
[267.52517700 61.36130142]
[253.23658752 65.92591858]
[250.28018188 77.07491302]
[242.19003296 85.46452332]
[230.92515564 88.89431000]
[219.29664612 86.38582611]
[210.26628113 78.45803070]
[195.76942444 82.31044006]
[181.27256775 86.16284943]
[166.77571106 90.01525879]
[152.27883911 93.86766815]
[137.78198242 97.72007751]
[138.82572937 112.21519470]
[134.14079285 127.04229736]
[144.27845764 138.09797668]
[154.41610718 149.15365601]
[169.57730103 156.74142456]
[166.48309326 173.41062927]
[149.60877991 175.05183411]
[143.36042786 159.29130554]
[133.22277832 148.23562622]
[123.08512115 137.17994690]
[109.17427826 142.79139709]
[109.54529572 157.78681946]
[109.91631317 172.78222656]
[110.28732300 187.77763367]
[110.65834045 202.77304077]
[124.18361664 210.05058289]
[132.24441528 223.12419128]
[132.67243958 238.47711182]
[125.35253906 251.97950745]
[112.25373840 259.99929810]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 121]
[6 120]
[7 119]
[8 118]
[9 117]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[57 70]
[58 69]
[59 68]
[60 67]
[61 66]
[74 106]
[75 105]
[76 104]
[77 103]
[78 102]
[79 101]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[108 116]
[109 115]
[110 114]
] def

init

% Start Annotations
1 73 10 GREEN omark 74 80 10 RED omark 81 126 10 BLUE omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
