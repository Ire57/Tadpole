%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Fri Aug 22 19:16:10 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGGGUGCGGAUGAUAACUACUGACGAAAGAGUCAUCGACUCAGUUAGUGGUUGGAUGUAGUCACCUUAGUCCAGCGGAGUUGGUGAUACCAGCAUCGUCUUGAUGCCCUUGGCAGCACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[74.42082214 261.02450562]
[61.32201767 253.00471497]
[54.00211716 239.50231934]
[54.43013763 224.14939880]
[62.49094009 211.07579041]
[76.01621246 203.79826355]
[76.38722992 188.80284119]
[76.75824738 173.80743408]
[77.12926483 158.81202698]
[77.50027466 143.81661987]
[69.98549652 156.79844666]
[55.09624100 158.61778259]
[41.31650925 152.69165039]
[32.39583206 140.63256836]
[30.76155281 125.72186279]
[36.85837173 112.01679993]
[49.02731705 103.24658203]
[63.95829010 101.79780579]
[78.43468475 97.86918640]
[63.84696960 94.37652588]
[49.25925827 90.88386536]
[34.67154694 87.39120483]
[20.08383560 83.89854431]
[5.49612427 80.40588379]
[-9.09158707 76.91322327]
[-23.67929840 73.42056274]
[-38.26700974 69.92790222]
[-45.72620392 76.00385284]
[-55.02202225 77.87350464]
[-63.98420715 75.23214722]
[-70.58136749 68.81318665]
[-73.38130188 60.19039154]
[-87.66990662 55.62577438]
[-101.95851135 51.06115341]
[-116.24711609 46.49653244]
[-130.53572083 41.93191528]
[-147.46360779 42.87152481]
[-153.05261230 26.86529160]
[-139.21910095 17.06374931]
[-125.97110748 27.64330864]
[-111.68250275 32.20792770]
[-97.39389038 36.77254868]
[-83.10528564 41.33716965]
[-68.81668091 45.90178680]
[-49.22216797 39.61100006]
[-34.77434921 55.34019470]
[-20.18663979 58.83285141]
[-5.59892750 62.32551193]
[8.98878384 65.81817627]
[23.57649612 69.31082916]
[38.16420746 72.80348969]
[52.75191879 76.29615021]
[67.33963013 79.78881073]
[81.92734528 83.28147125]
[94.14923859 74.58519745]
[95.63103485 59.65856934]
[97.11283112 44.73193741]
[98.59462738 29.80530739]
[100.07642365 14.87867832]
[90.33496094 2.72377563]
[92.05035400 -12.39284134]
[103.69822693 -21.60493088]
[105.18002319 -36.53155899]
[97.93418121 -51.24311447]
[107.27549744 -64.72167969]
[123.59443665 -63.10166931]
[130.10345459 -48.04960632]
[120.10665131 -35.04976273]
[118.62485504 -20.12313461]
[128.23423767 -8.80079460]
[126.94412231 6.35803986]
[115.00305939 16.36047554]
[113.52126312 31.28710365]
[112.03946686 46.21373367]
[110.55767059 61.14036560]
[109.07587433 76.06699371]
[120.73695374 85.50199127]
[135.02555847 80.93737030]
[149.31416321 76.37275696]
[163.60276794 71.80813599]
[174.39392090 60.23828125]
[188.87211609 63.73562241]
[203.16072083 59.17100143]
[217.44932556 54.60638046]
[231.73793030 50.04176331]
[246.02653503 45.47714233]
[260.31515503 40.91252136]
[273.56314087 30.33296394]
[287.39663696 40.13450623]
[281.80764771 56.14073563]
[264.87976074 55.20112610]
[250.59115601 59.76574707]
[236.30255127 64.33036804]
[222.01394653 68.89498901]
[207.72534180 73.45960999]
[193.43673706 78.02422333]
[183.66758728 89.26758575]
[168.16738892 86.09674072]
[153.87878418 90.66136169]
[139.59017944 95.22598267]
[125.30157471 99.79059601]
[123.37536621 107.03903198]
[138.35316467 106.22329712]
[143.75720215 120.21602631]
[132.11914062 129.67941284]
[119.52295685 121.53588867]
[117.59674835 128.78431702]
[127.73440552 139.83999634]
[137.87205505 150.89567566]
[148.00970459 161.95135498]
[163.17091370 169.53912354]
[160.07670593 186.20832825]
[143.20237732 187.84953308]
[136.95402527 172.08900452]
[126.81637573 161.03332520]
[116.67872620 149.97764587]
[106.54107666 138.92196655]
[92.49568939 144.18762207]
[92.12467194 159.18304443]
[91.75365448 174.17845154]
[91.38263702 189.17385864]
[91.01162720 204.16926575]
[104.16044617 212.10678101]
[111.56484985 225.56301880]
[111.23308563 240.91833496]
[103.25439453 254.04220581]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[55 76]
[56 75]
[57 74]
[58 73]
[59 72]
[62 69]
[63 68]
[77 101]
[78 100]
[79 99]
[80 98]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% Start Annotations
1 73 10 GREEN omark 74 80 10 RED omark 81 126 10 BLUE omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
