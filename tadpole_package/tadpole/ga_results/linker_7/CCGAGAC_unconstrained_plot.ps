%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Fri Aug 22 19:21:36 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGGGUGCGGAUGAUAACUACUGACGAAAGAGUCAUCGACUCAGUUAGUGGUUGGAUGUAGUCACCUUAGUCCGAGACAGUUGGUGAUACCAGCAUCGUCUUGAUGCCCUUGGCAGCACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[73.84828186 262.03329468]
[60.74948120 254.01350403]
[53.42958069 240.51110840]
[53.85760117 225.15818787]
[61.91840363 212.08459473]
[75.44367981 204.80705261]
[75.81468964 189.81163025]
[76.18570709 174.81622314]
[76.55672455 159.82081604]
[76.92774200 144.82540894]
[69.41296387 157.80723572]
[54.53211212 155.92034912]
[42.79810715 146.57620239]
[37.62752914 132.49554443]
[40.52590179 117.77822113]
[50.64930725 106.70949554]
[65.04969025 102.51224518]
[79.52607727 98.58361816]
[64.93836975 95.09096527]
[50.35065460 91.59830475]
[35.76294327 88.10564423]
[21.17523193 84.61298370]
[6.58752108 81.12032318]
[-8.00019073 77.62766266]
[-22.58790207 74.13500214]
[-37.17561340 70.64234161]
[-51.76332474 67.14968109]
[-59.22251892 73.22563171]
[-68.51834106 75.09528351]
[-77.48052216 72.45392609]
[-84.07768250 66.03496552]
[-86.87761688 57.41217041]
[-101.16622162 52.84755325]
[-115.45482635 48.28293228]
[-129.74343872 43.71831131]
[-144.03204346 39.15369415]
[-160.95993042 40.09330368]
[-166.54891968 24.08707047]
[-152.71540833 14.28552914]
[-139.46742249 24.86508751]
[-125.17881775 29.42970657]
[-110.89020538 33.99432755]
[-96.60160065 38.55894852]
[-82.31299591 43.12356567]
[-62.71848297 36.83277893]
[-48.27066422 52.56197357]
[-33.68295288 56.05463409]
[-19.09524155 59.54729080]
[-4.50753069 63.03995132]
[10.08018112 66.53260803]
[24.66789246 70.02526855]
[39.25560379 73.51792908]
[53.84331512 77.01058960]
[68.43103027 80.50325012]
[83.01873779 83.99591064]
[95.24063873 75.29963684]
[96.72243500 60.37300491]
[98.20423126 45.44637680]
[99.68602753 30.51974678]
[89.94456482 18.36484337]
[91.65995026 3.24822760]
[103.30783081 -5.96386147]
[104.78962708 -20.89049149]
[97.54377747 -35.60204315]
[106.88510132 -49.08061218]
[123.20403290 -47.46059799]
[129.71305847 -32.40853500]
[119.71625519 -19.40869522]
[118.23445892 -4.48206520]
[127.84384155 6.84027433]
[126.55371857 21.99910736]
[114.61265564 32.00154495]
[113.13085938 46.92817307]
[111.64906311 61.85480118]
[110.16726685 76.78143311]
[121.59140778 86.50197601]
[136.08827209 82.64956665]
[150.58512878 78.79715729]
[165.08198547 74.94474792]
[179.57884216 71.09233856]
[193.07803345 56.21743393]
[211.52655029 61.79372406]
[225.81515503 57.22910690]
[240.10375977 52.66448593]
[254.39236450 48.09986496]
[268.68096924 43.53524399]
[282.96957397 38.97062683]
[296.21755981 28.39106750]
[310.05108643 38.19260788]
[304.46206665 54.19884109]
[287.53417969 53.25923157]
[273.24557495 57.82385254]
[258.95697021 62.38846970]
[244.66838074 66.95309448]
[230.37977600 71.51770782]
[216.09115601 76.08232880]
[212.17646790 85.66298676]
[203.41902161 91.58268738]
[192.62777710 91.64696503]
[183.43125916 85.58919525]
[168.93440247 89.44160461]
[154.43754578 93.29401398]
[139.94067383 97.14642334]
[125.44382477 100.99883270]
[123.33892059 108.19740295]
[119.12911987 122.59454346]
[117.02421570 129.79310608]
[127.16186523 140.84878540]
[137.29951477 151.90446472]
[147.43716431 162.96014404]
[162.59837341 170.54791260]
[159.50416565 187.21711731]
[142.62983704 188.85833740]
[136.38150024 173.09779358]
[126.24384308 162.04211426]
[116.10619354 150.98643494]
[105.96853638 139.93075562]
[91.92315674 145.19642639]
[91.55213928 160.19183350]
[91.18112183 175.18724060]
[90.81010437 190.18264771]
[90.43908691 205.17807007]
[103.58790588 213.11557007]
[110.99230957 226.57180786]
[110.66054535 241.92712402]
[102.68186188 255.05099487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[56 75]
[57 74]
[58 73]
[59 72]
[62 69]
[63 68]
[76 104]
[77 103]
[78 102]
[79 101]
[80 100]
[82 96]
[83 95]
[84 94]
[85 93]
[86 92]
[87 91]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% Start Annotations
1 73 10 GREEN omark 74 80 10 RED omark 81 126 10 BLUE omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
