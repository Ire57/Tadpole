%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Fri Aug 22 18:46:38 2025
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAGUGUGCGGAUGAUAACUACUGACGAAAGAGUCAUCGACUCAGUUAGUGGUUGGAUGUAGUCACAUUAGUAAGACGCAGUUGGUGAUACCAGCAUCGUCUUGAUGCCCUUGGCAGCACCAAAA\
) } def
/len { sequence length } bind def

/coor [
[124.36481476 114.23503113]
[109.86795807 110.38262177]
[96.32122040 113.84348297]
[86.27963257 104.11423492]
[71.78277588 100.26182556]
[57.28591537 96.40941620]
[42.78905487 92.55700684]
[28.29219627 88.70459747]
[13.79533577 84.85218811]
[-0.74806201 81.17937469]
[-9.71338272 93.42268372]
[-22.64828682 101.27960968]
[-37.56552887 103.57949829]
[-52.18721771 100.00265503]
[-64.29263306 91.12438202]
[-72.05551910 78.32270050]
[-74.31955719 63.56453323]
[-88.90726471 60.07187271]
[-103.49497986 56.57921219]
[-118.08268738 53.08655548]
[-132.67039490 49.59389496]
[-147.25811768 46.10123444]
[-161.84582520 42.60857391]
[-176.43353271 39.11591339]
[-191.02125549 35.62325668]
[-205.60896301 32.13059616]
[-220.19667053 28.63793564]
[-227.65586853 34.71388245]
[-236.95169067 36.58353424]
[-245.91386414 33.94218063]
[-252.51103210 27.52321625]
[-255.31095886 18.90042305]
[-269.59957886 14.33580399]
[-283.88818359 9.77118397]
[-298.17678833 5.20656443]
[-312.46539307 0.64194489]
[-329.39328003 1.58155453]
[-334.98226929 -14.42467785]
[-321.14874268 -24.22621918]
[-307.90075684 -13.64666080]
[-293.61215210 -9.08204079]
[-279.32354736 -4.51742125]
[-265.03494263 0.04719871]
[-250.74633789 4.61181831]
[-231.15182495 -1.67896974]
[-216.70401001 14.05022430]
[-202.11630249 17.54288483]
[-187.52859497 21.03554344]
[-172.94087219 24.52820396]
[-158.35316467 28.02086258]
[-143.76545715 31.51352310]
[-129.17774963 35.00618362]
[-114.59003448 38.49884415]
[-100.00231934 41.99150085]
[-85.41460419 45.48416138]
[-70.82689667 48.97682190]
[-62.12455750 36.84428024]
[-49.40569305 28.94643593]
[-34.59203720 26.51325607]
[-19.93590546 29.94624710]
[-7.67776728 38.75259018]
[0.29626128 51.61563492]
[2.74459767 66.59165955]
[10.06069565 65.07312775]
[17.64774513 70.35533142]
[32.14460373 74.20774078]
[46.64146423 78.06015015]
[61.13832474 81.91255951]
[75.63518524 85.76496887]
[90.13204193 89.61737823]
[103.67877960 86.15651703]
[113.72036743 95.88576508]
[128.21722412 99.73817444]
[133.91043091 91.96750641]
[141.53450012 86.11821747]
[150.47029114 82.64862061]
[159.99679565 81.82442474]
[169.34930420 83.69850159]
[177.78080750 88.10762024]
[184.62168884 94.68664551]
[189.33280945 102.89871216]
[191.54806519 112.07900238]
[191.10281372 121.48860168]
[204.87060547 127.44241333]
[218.63839722 133.39622498]
[232.40618896 139.35003662]
[246.17398071 145.30384827]
[259.94177246 151.25765991]
[273.26580811 143.52615356]
[288.41055298 145.10430908]
[299.58978271 155.17845154]
[302.65661621 169.72949219]
[316.42440796 175.68330383]
[330.19219971 181.63711548]
[344.17138672 187.07608032]
[358.34271240 191.99272156]
[372.51403809 196.90937805]
[386.68539429 201.82601929]
[400.85671997 206.74266052]
[415.86169434 201.06553650]
[429.58160400 209.38084412]
[431.49163818 225.30979919]
[420.12661743 236.63305664]
[404.20483398 234.66438293]
[395.94006348 220.91398621]
[381.76873779 215.99734497]
[367.59741211 211.08070374]
[353.42608643 206.16406250]
[339.25473022 201.24742126]
[335.86016846 202.52816772]
[331.66067505 202.16036987]
[327.47033691 199.77729797]
[324.23840332 195.40490723]
[310.47061157 189.45109558]
[296.70281982 183.49728394]
[284.00000000 191.22880554]
[269.00292969 189.98313904]
[257.48028564 180.02911377]
[253.98796082 165.02546692]
[240.22016907 159.07164001]
[226.45237732 153.11782837]
[212.68458557 147.16401672]
[198.91679382 141.21020508]
[185.14900208 135.25639343]
[168.26382446 147.47923279]
[147.28927612 147.28248596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 73]
[2 72]
[4 70]
[5 69]
[6 68]
[7 67]
[8 66]
[9 65]
[10 63]
[17 56]
[18 55]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[25 48]
[26 47]
[27 46]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[83 124]
[84 123]
[85 122]
[86 121]
[87 120]
[88 119]
[92 115]
[93 114]
[94 113]
[95 109]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% Start Annotations
1 73 10 GREEN omark 74 80 10 RED omark 81 126 10 BLUE omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
